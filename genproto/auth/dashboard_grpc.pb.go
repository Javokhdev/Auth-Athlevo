// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dashboard.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	GetDailyPersonalAccessCount(ctx context.Context, in *AccessCountReq, opts ...grpc.CallOption) (*AccessCountRes, error)
	GetDailyPersonalBookingRevenueByDay(ctx context.Context, in *BookingRevenueReq, opts ...grpc.CallOption) (*BookingRevenueRes, error)
	GetDailyAccessCountBySubscriptionID(ctx context.Context, in *SubscriptionCountReq, opts ...grpc.CallOption) (*SubscriptionCountRes, error)
	GetDailyBookingRevenueBySubscriptionID(ctx context.Context, in *BookingRevenueBySubscriptionReq, opts ...grpc.CallOption) (*BookingRevenueBySubscriptionRes, error)
	TotalMen(ctx context.Context, in *TotalMenReq, opts ...grpc.CallOption) (*TotalMenRes, error)
	TotalWomen(ctx context.Context, in *TotalWomenReq, opts ...grpc.CallOption) (*TotalWomenRes, error)
	TotalMembers(ctx context.Context, in *TotalMembersReq, opts ...grpc.CallOption) (*TotalMembersRes, error)
	TotalAmount(ctx context.Context, in *TotalAmountReq, opts ...grpc.CallOption) (*TotalAmountRes, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetDailyPersonalAccessCount(ctx context.Context, in *AccessCountReq, opts ...grpc.CallOption) (*AccessCountRes, error) {
	out := new(AccessCountRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/GetDailyPersonalAccessCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDailyPersonalBookingRevenueByDay(ctx context.Context, in *BookingRevenueReq, opts ...grpc.CallOption) (*BookingRevenueRes, error) {
	out := new(BookingRevenueRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/GetDailyPersonalBookingRevenueByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDailyAccessCountBySubscriptionID(ctx context.Context, in *SubscriptionCountReq, opts ...grpc.CallOption) (*SubscriptionCountRes, error) {
	out := new(SubscriptionCountRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/GetDailyAccessCountBySubscriptionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDailyBookingRevenueBySubscriptionID(ctx context.Context, in *BookingRevenueBySubscriptionReq, opts ...grpc.CallOption) (*BookingRevenueBySubscriptionRes, error) {
	out := new(BookingRevenueBySubscriptionRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/GetDailyBookingRevenueBySubscriptionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalMen(ctx context.Context, in *TotalMenReq, opts ...grpc.CallOption) (*TotalMenRes, error) {
	out := new(TotalMenRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/TotalMen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalWomen(ctx context.Context, in *TotalWomenReq, opts ...grpc.CallOption) (*TotalWomenRes, error) {
	out := new(TotalWomenRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/TotalWomen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalMembers(ctx context.Context, in *TotalMembersReq, opts ...grpc.CallOption) (*TotalMembersRes, error) {
	out := new(TotalMembersRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/TotalMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalAmount(ctx context.Context, in *TotalAmountReq, opts ...grpc.CallOption) (*TotalAmountRes, error) {
	out := new(TotalAmountRes)
	err := c.cc.Invoke(ctx, "/auth.DashboardService/TotalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility
type DashboardServiceServer interface {
	GetDailyPersonalAccessCount(context.Context, *AccessCountReq) (*AccessCountRes, error)
	GetDailyPersonalBookingRevenueByDay(context.Context, *BookingRevenueReq) (*BookingRevenueRes, error)
	GetDailyAccessCountBySubscriptionID(context.Context, *SubscriptionCountReq) (*SubscriptionCountRes, error)
	GetDailyBookingRevenueBySubscriptionID(context.Context, *BookingRevenueBySubscriptionReq) (*BookingRevenueBySubscriptionRes, error)
	TotalMen(context.Context, *TotalMenReq) (*TotalMenRes, error)
	TotalWomen(context.Context, *TotalWomenReq) (*TotalWomenRes, error)
	TotalMembers(context.Context, *TotalMembersReq) (*TotalMembersRes, error)
	TotalAmount(context.Context, *TotalAmountReq) (*TotalAmountRes, error)
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServiceServer struct {
}

func (UnimplementedDashboardServiceServer) GetDailyPersonalAccessCount(context.Context, *AccessCountReq) (*AccessCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyPersonalAccessCount not implemented")
}
func (UnimplementedDashboardServiceServer) GetDailyPersonalBookingRevenueByDay(context.Context, *BookingRevenueReq) (*BookingRevenueRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyPersonalBookingRevenueByDay not implemented")
}
func (UnimplementedDashboardServiceServer) GetDailyAccessCountBySubscriptionID(context.Context, *SubscriptionCountReq) (*SubscriptionCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyAccessCountBySubscriptionID not implemented")
}
func (UnimplementedDashboardServiceServer) GetDailyBookingRevenueBySubscriptionID(context.Context, *BookingRevenueBySubscriptionReq) (*BookingRevenueBySubscriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyBookingRevenueBySubscriptionID not implemented")
}
func (UnimplementedDashboardServiceServer) TotalMen(context.Context, *TotalMenReq) (*TotalMenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMen not implemented")
}
func (UnimplementedDashboardServiceServer) TotalWomen(context.Context, *TotalWomenReq) (*TotalWomenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalWomen not implemented")
}
func (UnimplementedDashboardServiceServer) TotalMembers(context.Context, *TotalMembersReq) (*TotalMembersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMembers not implemented")
}
func (UnimplementedDashboardServiceServer) TotalAmount(context.Context, *TotalAmountReq) (*TotalAmountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalAmount not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_GetDailyPersonalAccessCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyPersonalAccessCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/GetDailyPersonalAccessCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyPersonalAccessCount(ctx, req.(*AccessCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDailyPersonalBookingRevenueByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRevenueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyPersonalBookingRevenueByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/GetDailyPersonalBookingRevenueByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyPersonalBookingRevenueByDay(ctx, req.(*BookingRevenueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDailyAccessCountBySubscriptionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyAccessCountBySubscriptionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/GetDailyAccessCountBySubscriptionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyAccessCountBySubscriptionID(ctx, req.(*SubscriptionCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDailyBookingRevenueBySubscriptionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRevenueBySubscriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyBookingRevenueBySubscriptionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/GetDailyBookingRevenueBySubscriptionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyBookingRevenueBySubscriptionID(ctx, req.(*BookingRevenueBySubscriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalMen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalMenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalMen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/TotalMen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalMen(ctx, req.(*TotalMenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalWomen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalWomenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalWomen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/TotalWomen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalWomen(ctx, req.(*TotalWomenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/TotalMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalMembers(ctx, req.(*TotalMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.DashboardService/TotalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalAmount(ctx, req.(*TotalAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDailyPersonalAccessCount",
			Handler:    _DashboardService_GetDailyPersonalAccessCount_Handler,
		},
		{
			MethodName: "GetDailyPersonalBookingRevenueByDay",
			Handler:    _DashboardService_GetDailyPersonalBookingRevenueByDay_Handler,
		},
		{
			MethodName: "GetDailyAccessCountBySubscriptionID",
			Handler:    _DashboardService_GetDailyAccessCountBySubscriptionID_Handler,
		},
		{
			MethodName: "GetDailyBookingRevenueBySubscriptionID",
			Handler:    _DashboardService_GetDailyBookingRevenueBySubscriptionID_Handler,
		},
		{
			MethodName: "TotalMen",
			Handler:    _DashboardService_TotalMen_Handler,
		},
		{
			MethodName: "TotalWomen",
			Handler:    _DashboardService_TotalWomen_Handler,
		},
		{
			MethodName: "TotalMembers",
			Handler:    _DashboardService_TotalMembers_Handler,
		},
		{
			MethodName: "TotalAmount",
			Handler:    _DashboardService_TotalAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard.proto",
}
