// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.3
// source: dashboard.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DashboardService_GetDailyPersonalAccessCount_FullMethodName            = "/auth.DashboardService/GetDailyPersonalAccessCount"
	DashboardService_GetDailyPersonalBookingRevenueByDay_FullMethodName    = "/auth.DashboardService/GetDailyPersonalBookingRevenueByDay"
	DashboardService_GetDailyAccessCountBySubscriptionID_FullMethodName    = "/auth.DashboardService/GetDailyAccessCountBySubscriptionID"
	DashboardService_GetDailyBookingRevenueBySubscriptionID_FullMethodName = "/auth.DashboardService/GetDailyBookingRevenueBySubscriptionID"
	DashboardService_TotalMen_FullMethodName                               = "/auth.DashboardService/TotalMen"
	DashboardService_TotalWomen_FullMethodName                             = "/auth.DashboardService/TotalWomen"
	DashboardService_TotalMembers_FullMethodName                           = "/auth.DashboardService/TotalMembers"
	DashboardService_TotalAmount_FullMethodName                            = "/auth.DashboardService/TotalAmount"
	DashboardService_CompareCurrentAndPreviousMonthRevenue_FullMethodName  = "/auth.DashboardService/CompareCurrentAndPreviousMonthRevenue"
	DashboardService_GetMonthlyRevenueStats_FullMethodName                 = "/auth.DashboardService/GetMonthlyRevenueStats"
	DashboardService_GetGenderCounts_FullMethodName                        = "/auth.DashboardService/GetGenderCounts"
)

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	GetDailyPersonalAccessCount(ctx context.Context, in *AccessCountReq, opts ...grpc.CallOption) (*AccessCountRes, error)
	GetDailyPersonalBookingRevenueByDay(ctx context.Context, in *BookingRevenueReq, opts ...grpc.CallOption) (*BookingRevenueRes, error)
	GetDailyAccessCountBySubscriptionID(ctx context.Context, in *SubscriptionCountReq, opts ...grpc.CallOption) (*SubscriptionCountRes, error)
	GetDailyBookingRevenueBySubscriptionID(ctx context.Context, in *BookingRevenueBySubscriptionReq, opts ...grpc.CallOption) (*BookingRevenueBySubscriptionRes, error)
	TotalMen(ctx context.Context, in *TotalMenReq, opts ...grpc.CallOption) (*TotalMenRes, error)
	TotalWomen(ctx context.Context, in *TotalWomenReq, opts ...grpc.CallOption) (*TotalWomenRes, error)
	TotalMembers(ctx context.Context, in *TotalMembersReq, opts ...grpc.CallOption) (*TotalMembersRes, error)
	TotalAmount(ctx context.Context, in *TotalAmountReq, opts ...grpc.CallOption) (*TotalAmountRes, error)
	CompareCurrentAndPreviousMonthRevenue(ctx context.Context, in *Void, opts ...grpc.CallOption) (*RevenueReq, error)
	GetMonthlyRevenueStats(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MonthlyRevenueRes, error)
	GetGenderCounts(ctx context.Context, in *TotalGenderReq, opts ...grpc.CallOption) (*GenderCountsRes, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetDailyPersonalAccessCount(ctx context.Context, in *AccessCountReq, opts ...grpc.CallOption) (*AccessCountRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessCountRes)
	err := c.cc.Invoke(ctx, DashboardService_GetDailyPersonalAccessCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDailyPersonalBookingRevenueByDay(ctx context.Context, in *BookingRevenueReq, opts ...grpc.CallOption) (*BookingRevenueRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingRevenueRes)
	err := c.cc.Invoke(ctx, DashboardService_GetDailyPersonalBookingRevenueByDay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDailyAccessCountBySubscriptionID(ctx context.Context, in *SubscriptionCountReq, opts ...grpc.CallOption) (*SubscriptionCountRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionCountRes)
	err := c.cc.Invoke(ctx, DashboardService_GetDailyAccessCountBySubscriptionID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetDailyBookingRevenueBySubscriptionID(ctx context.Context, in *BookingRevenueBySubscriptionReq, opts ...grpc.CallOption) (*BookingRevenueBySubscriptionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingRevenueBySubscriptionRes)
	err := c.cc.Invoke(ctx, DashboardService_GetDailyBookingRevenueBySubscriptionID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalMen(ctx context.Context, in *TotalMenReq, opts ...grpc.CallOption) (*TotalMenRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalMenRes)
	err := c.cc.Invoke(ctx, DashboardService_TotalMen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalWomen(ctx context.Context, in *TotalWomenReq, opts ...grpc.CallOption) (*TotalWomenRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalWomenRes)
	err := c.cc.Invoke(ctx, DashboardService_TotalWomen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalMembers(ctx context.Context, in *TotalMembersReq, opts ...grpc.CallOption) (*TotalMembersRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalMembersRes)
	err := c.cc.Invoke(ctx, DashboardService_TotalMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) TotalAmount(ctx context.Context, in *TotalAmountReq, opts ...grpc.CallOption) (*TotalAmountRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TotalAmountRes)
	err := c.cc.Invoke(ctx, DashboardService_TotalAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CompareCurrentAndPreviousMonthRevenue(ctx context.Context, in *Void, opts ...grpc.CallOption) (*RevenueReq, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevenueReq)
	err := c.cc.Invoke(ctx, DashboardService_CompareCurrentAndPreviousMonthRevenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetMonthlyRevenueStats(ctx context.Context, in *Void, opts ...grpc.CallOption) (*MonthlyRevenueRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonthlyRevenueRes)
	err := c.cc.Invoke(ctx, DashboardService_GetMonthlyRevenueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetGenderCounts(ctx context.Context, in *TotalGenderReq, opts ...grpc.CallOption) (*GenderCountsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenderCountsRes)
	err := c.cc.Invoke(ctx, DashboardService_GetGenderCounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility.
type DashboardServiceServer interface {
	GetDailyPersonalAccessCount(context.Context, *AccessCountReq) (*AccessCountRes, error)
	GetDailyPersonalBookingRevenueByDay(context.Context, *BookingRevenueReq) (*BookingRevenueRes, error)
	GetDailyAccessCountBySubscriptionID(context.Context, *SubscriptionCountReq) (*SubscriptionCountRes, error)
	GetDailyBookingRevenueBySubscriptionID(context.Context, *BookingRevenueBySubscriptionReq) (*BookingRevenueBySubscriptionRes, error)
	TotalMen(context.Context, *TotalMenReq) (*TotalMenRes, error)
	TotalWomen(context.Context, *TotalWomenReq) (*TotalWomenRes, error)
	TotalMembers(context.Context, *TotalMembersReq) (*TotalMembersRes, error)
	TotalAmount(context.Context, *TotalAmountReq) (*TotalAmountRes, error)
	CompareCurrentAndPreviousMonthRevenue(context.Context, *Void) (*RevenueReq, error)
	GetMonthlyRevenueStats(context.Context, *Void) (*MonthlyRevenueRes, error)
	GetGenderCounts(context.Context, *TotalGenderReq) (*GenderCountsRes, error)
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardServiceServer struct{}

func (UnimplementedDashboardServiceServer) GetDailyPersonalAccessCount(context.Context, *AccessCountReq) (*AccessCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyPersonalAccessCount not implemented")
}
func (UnimplementedDashboardServiceServer) GetDailyPersonalBookingRevenueByDay(context.Context, *BookingRevenueReq) (*BookingRevenueRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyPersonalBookingRevenueByDay not implemented")
}
func (UnimplementedDashboardServiceServer) GetDailyAccessCountBySubscriptionID(context.Context, *SubscriptionCountReq) (*SubscriptionCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyAccessCountBySubscriptionID not implemented")
}
func (UnimplementedDashboardServiceServer) GetDailyBookingRevenueBySubscriptionID(context.Context, *BookingRevenueBySubscriptionReq) (*BookingRevenueBySubscriptionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyBookingRevenueBySubscriptionID not implemented")
}
func (UnimplementedDashboardServiceServer) TotalMen(context.Context, *TotalMenReq) (*TotalMenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMen not implemented")
}
func (UnimplementedDashboardServiceServer) TotalWomen(context.Context, *TotalWomenReq) (*TotalWomenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalWomen not implemented")
}
func (UnimplementedDashboardServiceServer) TotalMembers(context.Context, *TotalMembersReq) (*TotalMembersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalMembers not implemented")
}
func (UnimplementedDashboardServiceServer) TotalAmount(context.Context, *TotalAmountReq) (*TotalAmountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalAmount not implemented")
}
func (UnimplementedDashboardServiceServer) CompareCurrentAndPreviousMonthRevenue(context.Context, *Void) (*RevenueReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareCurrentAndPreviousMonthRevenue not implemented")
}
func (UnimplementedDashboardServiceServer) GetMonthlyRevenueStats(context.Context, *Void) (*MonthlyRevenueRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyRevenueStats not implemented")
}
func (UnimplementedDashboardServiceServer) GetGenderCounts(context.Context, *TotalGenderReq) (*GenderCountsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenderCounts not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}
func (UnimplementedDashboardServiceServer) testEmbeddedByValue()                          {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedDashboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_GetDailyPersonalAccessCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyPersonalAccessCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetDailyPersonalAccessCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyPersonalAccessCount(ctx, req.(*AccessCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDailyPersonalBookingRevenueByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRevenueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyPersonalBookingRevenueByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetDailyPersonalBookingRevenueByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyPersonalBookingRevenueByDay(ctx, req.(*BookingRevenueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDailyAccessCountBySubscriptionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyAccessCountBySubscriptionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetDailyAccessCountBySubscriptionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyAccessCountBySubscriptionID(ctx, req.(*SubscriptionCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetDailyBookingRevenueBySubscriptionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRevenueBySubscriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetDailyBookingRevenueBySubscriptionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetDailyBookingRevenueBySubscriptionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetDailyBookingRevenueBySubscriptionID(ctx, req.(*BookingRevenueBySubscriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalMen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalMenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalMen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_TotalMen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalMen(ctx, req.(*TotalMenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalWomen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalWomenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalWomen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_TotalWomen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalWomen(ctx, req.(*TotalWomenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_TotalMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalMembers(ctx, req.(*TotalMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_TotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).TotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_TotalAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).TotalAmount(ctx, req.(*TotalAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CompareCurrentAndPreviousMonthRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CompareCurrentAndPreviousMonthRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_CompareCurrentAndPreviousMonthRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CompareCurrentAndPreviousMonthRevenue(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetMonthlyRevenueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetMonthlyRevenueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetMonthlyRevenueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetMonthlyRevenueStats(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetGenderCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalGenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetGenderCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DashboardService_GetGenderCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetGenderCounts(ctx, req.(*TotalGenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDailyPersonalAccessCount",
			Handler:    _DashboardService_GetDailyPersonalAccessCount_Handler,
		},
		{
			MethodName: "GetDailyPersonalBookingRevenueByDay",
			Handler:    _DashboardService_GetDailyPersonalBookingRevenueByDay_Handler,
		},
		{
			MethodName: "GetDailyAccessCountBySubscriptionID",
			Handler:    _DashboardService_GetDailyAccessCountBySubscriptionID_Handler,
		},
		{
			MethodName: "GetDailyBookingRevenueBySubscriptionID",
			Handler:    _DashboardService_GetDailyBookingRevenueBySubscriptionID_Handler,
		},
		{
			MethodName: "TotalMen",
			Handler:    _DashboardService_TotalMen_Handler,
		},
		{
			MethodName: "TotalWomen",
			Handler:    _DashboardService_TotalWomen_Handler,
		},
		{
			MethodName: "TotalMembers",
			Handler:    _DashboardService_TotalMembers_Handler,
		},
		{
			MethodName: "TotalAmount",
			Handler:    _DashboardService_TotalAmount_Handler,
		},
		{
			MethodName: "CompareCurrentAndPreviousMonthRevenue",
			Handler:    _DashboardService_CompareCurrentAndPreviousMonthRevenue_Handler,
		},
		{
			MethodName: "GetMonthlyRevenueStats",
			Handler:    _DashboardService_GetMonthlyRevenueStats_Handler,
		},
		{
			MethodName: "GetGenderCounts",
			Handler:    _DashboardService_GetGenderCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard.proto",
}
