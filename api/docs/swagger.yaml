definitions:
  auth.AccessCount:
    properties:
      accessCount:
        type: integer
      accessDate:
        type: string
    type: object
  auth.AccessCountRes:
    properties:
      accessCountList:
        items:
          $ref: '#/definitions/auth.AccessCount'
        type: array
    type: object
  auth.BookingRevenue:
    properties:
      averageRevenue:
        type: number
      bookingDate:
        type: string
    type: object
  auth.BookingRevenueBySubscription:
    properties:
      averageRevenue:
        type: number
      bookingDate:
        type: string
    type: object
  auth.BookingRevenueBySubscriptionRes:
    properties:
      bookingRevenueBySubscriptionList:
        items:
          $ref: '#/definitions/auth.BookingRevenueBySubscription'
        type: array
    type: object
  auth.BookingRevenueRes:
    properties:
      bookingRevenueList:
        items:
          $ref: '#/definitions/auth.BookingRevenue'
        type: array
    type: object
  auth.ChangePasswordReqBody:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  auth.EditProfileReqBpdy:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      gym_id:
        type: string
      id:
        type: string
      phone_number:
        type: string
      username:
        type: string
    type: object
  auth.GenderCountsRes:
    properties:
      totalMen:
        type: integer
      totalWomen:
        type: integer
    type: object
  auth.GetByEmail:
    properties:
      email:
        type: string
    type: object
  auth.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.LoginRes:
    properties:
      expires_at:
        type: string
      token:
        type: string
    type: object
  auth.MonthlyRevenue:
    properties:
      amount:
        type: number
      month:
        type: integer
      year:
        type: integer
    type: object
  auth.MonthlyRevenueRes:
    properties:
      monthlyRevenue:
        items:
          $ref: '#/definitions/auth.MonthlyRevenue'
        type: array
    type: object
  auth.RegisterReq:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      gym_id:
        type: string
      password:
        type: string
      phone_number:
        type: string
      username:
        type: string
    type: object
  auth.ResetPassReqBody:
    properties:
      email_code:
        type: string
      new_password:
        type: string
    type: object
  auth.RevenueReq:
    properties:
      percentageChange:
        type: number
    type: object
  auth.Role:
    properties:
      id:
        type: string
      role:
        type: string
    type: object
  auth.Setting:
    properties:
      language:
        type: string
      notification:
        type: string
      privacy_level:
        type: string
      theme:
        type: string
    type: object
  auth.SubscriptionCount:
    properties:
      accessCount:
        type: integer
      accessDate:
        type: string
    type: object
  auth.SubscriptionCountRes:
    properties:
      subscriptionCountList:
        items:
          $ref: '#/definitions/auth.SubscriptionCount'
        type: array
    type: object
  auth.TotalAmount:
    properties:
      totalAmount:
        type: number
    type: object
  auth.TotalAmountRes:
    properties:
      totalAmountList:
        items:
          $ref: '#/definitions/auth.TotalAmount'
        type: array
    type: object
  auth.TotalMembers:
    properties:
      totalMembers:
        type: integer
    type: object
  auth.TotalMembersRes:
    properties:
      totalMembersList:
        items:
          $ref: '#/definitions/auth.TotalMembers'
        type: array
    type: object
  auth.TotalMen:
    properties:
      gender:
        description: This is fine if you want to keep track of gender types
        type: string
      totalMen:
        type: integer
    type: object
  auth.TotalMenRes:
    properties:
      totalMenList:
        items:
          $ref: '#/definitions/auth.TotalMen'
        type: array
    type: object
  auth.TotalWomen:
    properties:
      gender:
        type: string
      totalWomen:
        type: integer
    type: object
  auth.TotalWomenRes:
    properties:
      totalWomenList:
        items:
          $ref: '#/definitions/auth.TotalWomen'
        type: array
    type: object
  auth.UserRepeated:
    properties:
      users:
        items:
          $ref: '#/definitions/auth.UserRes'
        type: array
    type: object
  auth.UserRes:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      gym_id:
        type: string
      id:
        type: string
      phone_number:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: API for Authentication Service
  title: Authentication Service API
  version: "1.0"
paths:
  /change-role:
    put:
      consumes:
      - application/json
      description: Update the role of a user with the specified ID
      parameters:
      - description: Change role request
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/auth.Role'
      produces:
      - application/json
      responses:
        "200":
          description: Role Changed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Change user role
      tags:
      - auth
  /dashboard/access-count:
    get:
      consumes:
      - application/json
      description: Get the number of times a gym accessed the gym within the specified
        date range
      parameters:
      - description: gym ID
        in: query
        name: gym_id
        required: true
        type: string
      - description: Start Date
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AccessCountRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the access count of a gym
      tags:
      - dashboard
  /dashboard/booking-revenue:
    get:
      consumes:
      - application/json
      description: Get the total booking revenue within the specified date range for
        a gym
      parameters:
      - description: gym ID
        in: query
        name: gym_id
        required: true
        type: string
      - description: Start Date
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.BookingRevenueRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get total booking revenue for a gym
      tags:
      - dashboard
  /dashboard/compare-month-revenue:
    get:
      consumes:
      - application/json
      description: Compare current and previous
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RevenueReq'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Compare current and previous
      tags:
      - dashboard
  /dashboard/gender:
    get:
      consumes:
      - application/json
      description: Get the total count of gender members for a specified gym
      parameters:
      - description: Gym ID
        in: query
        name: gym_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.GenderCountsRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the total number of gender in a gym
      tags:
      - dashboard
  /dashboard/monthly-renue-stats:
    get:
      consumes:
      - application/json
      description: Get monthly revenue
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.MonthlyRevenueRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get monthly revenue
      tags:
      - dashboard
  /dashboard/subscription/access-count:
    get:
      consumes:
      - application/json
      description: Get the number of times a user accessed the gym based on subscription
        ID within a date range
      parameters:
      - description: Subscription ID
        in: query
        name: subscription_id
        required: true
        type: string
      - description: Start Date
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SubscriptionCountRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the access count by subscription ID
      tags:
      - dashboard
  /dashboard/subscription/booking-revenue:
    get:
      consumes:
      - application/json
      description: Get total booking revenue based on subscription ID within a date
        range
      parameters:
      - description: Subscription ID
        in: query
        name: subscription_id
        required: true
        type: string
      - description: Start Date
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.BookingRevenueBySubscriptionRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get booking revenue by subscription ID
      tags:
      - dashboard
  /dashboard/total-amount:
    get:
      consumes:
      - application/json
      description: Get the total revenue amount for a specified gym
      parameters:
      - description: Gym ID
        in: query
        name: gym_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TotalAmountRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the total revenue amount for a gym
      tags:
      - dashboard
  /dashboard/total-members:
    get:
      consumes:
      - application/json
      description: Get the total count of members for a specified gym
      parameters:
      - description: Gym ID
        in: query
        name: gym_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TotalMembersRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the total number of members in a gym
      tags:
      - dashboard
  /dashboard/total-men:
    get:
      consumes:
      - application/json
      description: Get the total count of male members for a specified gym
      parameters:
      - description: Gym ID
        in: query
        name: gym_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TotalMenRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the total number of men in a gym
      tags:
      - dashboard
  /dashboard/total-women:
    get:
      consumes:
      - application/json
      description: Get the total count of female members for a specified gym
      parameters:
      - description: Gym ID
        in: query
        name: gym_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TotalWomenRes'
        "400":
          description: Invalid Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get the total number of women in a gym
      tags:
      - dashboard
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset user's password
      parameters:
      - description: Email Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.GetByEmail'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Forgot password
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Login a user
      tags:
      - auth
  /refresh-token/{email}:
    get:
      consumes:
      - application/json
      description: Request to reset user's access token
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginRes'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Refresh Token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
  /reset-password:
    put:
      consumes:
      - application/json
      description: Reset user's password with a reset code
      parameters:
      - description: Password Reset Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPassReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Reset password
      tags:
      - auth
  /user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the specified ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
  /user/get-profiles:
    get:
      consumes:
      - application/json
      description: Retrieve user profiles with optional filters
      parameters:
      - description: Filter by user ID
        in: query
        name: id
        type: string
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by full name
        in: query
        name: full_name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by gym ID
        in: query
        name: gym_id
        type: string
      - description: Filter by phone number
        in: query
        name: phone_number
        type: string
      - description: Filter by gender
        in: query
        name: gender
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserRepeated'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user profiles
      tags:
      - users
  /user/passwords:
    put:
      consumes:
      - application/json
      description: Update the password of a user with the specified ID
      parameters:
      - description: Updated password details
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /user/profiles:
    put:
      consumes:
      - application/json
      description: Update the profile of a user with the specified ID
      parameters:
      - description: Updated profile details
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/auth.EditProfileReqBpdy'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Edit user profile
      tags:
      - users
  /user/setting:
    get:
      consumes:
      - application/json
      description: Retrieve the settings of a user with the specified ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.Setting'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user settings
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the settings of a user with the specified ID
      parameters:
      - description: Updated setting details
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/auth.Setting'
      produces:
      - application/json
      responses:
        "200":
          description: Setting updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Edit user settings
      tags:
      - users
  /validate:
    get:
      consumes:
      - application/json
      description: Validates a JWT token and returns the user ID and role.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validate Token
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
